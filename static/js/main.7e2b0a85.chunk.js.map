{"version":3,"sources":["components/ListSelectionField.js","components/Field.js","views/Form.js","App.js","serviceWorker.js","index.js"],"names":["ListSelectionField","field_name","options","formUpdate","useState","fieldValue","setFieldValue","useEffect","console","log","FormControl","style","width","border","FormLabel","component","List","Object","entries","map","entry","text","value","ListItem","button","selected","onClick","ListItemText","primary","Field","input_field","type","className","handleChange","e","target","undefined","TextField","label","onChange","Yes","No","key","id","RadioGroup","option_value","FormControlLabel","control","Radio","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","margin","formControl","spacing","checkboxGroup","justifyContent","checkbox","numbersGroup","alignSelf","number","categoryGroup","flexWrap","category","submitButton","Form","classes","formRequest","setFormRequest","useCallback","setRequest","newRequest","requestUpdate","fields","FormGroup","Button","variant","color","fetch","method","mode","headers","body","JSON","stringify","then","response","json","data","risk_score","risk","parseFloat","toFixed","alert","message","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7e2b0a85.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\n\r\nexport default function ListSelectionField({\r\n  field_name,\r\n  options,\r\n  formUpdate,\r\n}) {\r\n  const [fieldValue, setFieldValue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(field_name, fieldValue)\r\n    formUpdate(field_name, fieldValue);\r\n  }, [field_name, fieldValue]);\r\n\r\n  return (\r\n    <FormControl style={{width: '100%', border: '1px solid gray'}}>\r\n      <FormLabel component=\"legend\">{field_name}</FormLabel>\r\n      <List style={{width: '100%'}}>\r\n        {Object.entries(options).map(entry => {\r\n          let [text, value] = entry\r\n          return (\r\n            <ListItem\r\n              button\r\n              selected={value === fieldValue}\r\n              onClick={() => setFieldValue(value)}\r\n              style={{width: '100%'}}\r\n            >\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n  TextField,\r\n  FormLabel,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\n\r\nimport ListSelectionField from \"./ListSelectionField.js\";\r\n\r\nexport default function Field({\r\n  field_name,\r\n  type,\r\n  formUpdate,\r\n  options,\r\n  className,\r\n}) {\r\n  const [fieldValue, setFieldValue] = useState(null);\r\n  let handleChange = (e) => {\r\n    setFieldValue(e.target.value);\r\n  };\r\n\r\n  let handleCheckboxChange = (e) => {\r\n    setFieldValue(e.target.checked);\r\n  };\r\n\r\n  useEffect(() => {\r\n    formUpdate(field_name, fieldValue);\r\n  }, [field_name, fieldValue]);\r\n  let input_field;\r\n  if (options === undefined) {\r\n    if (type !== \"checkbox\") {\r\n      input_field = (\r\n        <FormControl style={{width: \"100%\"}}>\r\n          <TextField type={type} label={field_name} onChange={handleChange} />\r\n        </FormControl>\r\n      );\r\n    } else {\r\n      input_field = (\r\n        <ListSelectionField\r\n          field_name={field_name}\r\n          options={{ Yes: \"true\", No: \"false\" }}\r\n          formUpdate={formUpdate}\r\n        />\r\n      );\r\n    }\r\n  } else {\r\n    input_field = (\r\n      <FormControl key={field_name}>\r\n        <FormLabel id=\"-label\">{field_name}</FormLabel>\r\n\r\n        <RadioGroup onChange={handleChange} value={fieldValue}>\r\n          {options.map((option_value) => {\r\n            return (\r\n              <FormControlLabel\r\n                value={option_value}\r\n                control={<Radio />}\r\n                label={option_value}\r\n                key={option_value}\r\n              />\r\n            );\r\n          })}\r\n        </RadioGroup>\r\n      </FormControl>\r\n    );\r\n  }\r\n  return <div className={className}>{input_field}</div>;\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\n\r\nimport Field from \"../components/Field.js\";\r\nimport { Button, FormControl, FormGroup, makeStyles } from \"@material-ui/core\";\r\n\r\nfunction requestUpdate(field_name, value, formRequest, setRequest) {\r\n  if ((value !== undefined) & (value !== null) & (value !== \"\")) {\r\n    let newRequest = { ...formRequest };\r\n    newRequest[field_name] = value;\r\n    setRequest(newRequest);\r\n    console.log(newRequest);\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"80%\",\r\n    alignItems: \"center\",\r\n    margin: \"0 0 128px 0\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    // justifyContent: \"center\",\r\n\r\n  },\r\n  checkboxGroup: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"80%\",\r\n    justifyContent: \"center\",\r\n    margin: \"32px 0 0 0\",\r\n    // border: \"1px solid red\",\r\n  },\r\n  checkbox: {\r\n    width: \"100%\",\r\n    // border: \"1px solid red\",\r\n  },\r\n  numbersGroup: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // flexWrap: \"wrap\",\r\n    justifyContent: \"space-evenly\",\r\n    alignSelf: \"center\",\r\n    margin: \"32px 0 0 0\",\r\n    // border: \"1px solid red\",\r\n    width: \"80%\",\r\n  },\r\n  number: {\r\n    margin: \"6px\",\r\n  },\r\n  categoryGroup: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"flex-start\",\r\n    alignSelf: \"center\",\r\n    margin: \"32px 0 0 0\",\r\n  },\r\n  category: {\r\n    margin: \"12px\",\r\n  },\r\n  submitButton: {\r\n    alignSelf: \"center\",\r\n    width: \"50%\",\r\n  },\r\n}));\r\n\r\nexport default function Form() {\r\n  const classes = useStyles();\r\n  const [formRequest, setFormRequest] = useState({});\r\n\r\n  let handleSubmit = () => {\r\n    fetch(\r\n      \"https://ayef8zx40j.execute-api.us-east-1.amazonaws.com/dev/\",\r\n      {\r\n        method:\"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(formRequest)\r\n      }\r\n    ).then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      if (data.risk_score !== undefined){\r\n        const risk = (parseFloat(data.risk_score) * 100).toFixed(2)\r\n        alert(\"The risk score is: \" + risk + \"%\")\r\n    } else{\r\n      alert(data.message)}\r\n    }\r\n    );\r\n  \r\n    console.log(JSON.stringify(formRequest));\r\n  };\r\n\r\n  const formUpdate = useCallback(\r\n    (field_name, value) => {\r\n      requestUpdate(field_name, value, formRequest, setFormRequest);\r\n    },\r\n    [formRequest, setFormRequest]\r\n  );\r\n\r\n  let fields = [\r\n    <FormGroup key=\"demo-numbers\" className={classes.numbersGroup}>\r\n      <Field\r\n        key=\"Age\"\r\n        field_name=\"Age\"\r\n        type=\"number\"\r\n        formUpdate={formUpdate}\r\n        className={classes.number}\r\n      />\r\n      <Field\r\n        key=\"BMI\"\r\n        field_name=\"BMI\"\r\n        type=\"number\"\r\n        formUpdate={formUpdate}\r\n        className={classes.number}\r\n      />\r\n      <Field\r\n        key=\"Coronary Arteries Blocked\"\r\n        field_name=\"Coronary Arteries Blocked\"\r\n        type=\"number\"\r\n        formUpdate={formUpdate}\r\n        className={classes.number}\r\n      />\r\n    </FormGroup>,\r\n    <FormGroup key=\"numbers\" className={classes.numbersGroup}>\r\n      <Field\r\n        key=\"LVEF\"\r\n        field_name=\"LVEF\"\r\n        type=\"number\"\r\n        formUpdate={formUpdate}\r\n        className={classes.number}\r\n      />\r\n      <Field\r\n        key=\"Hematocrit\"\r\n        field_name=\"Hematocrit\"\r\n        type=\"number\"\r\n        formUpdate={formUpdate}\r\n        className={classes.number}\r\n      />\r\n      <Field\r\n        key=\"Creatinine\"\r\n        field_name=\"Creatinine\"\r\n        type=\"number\"\r\n        formUpdate={formUpdate}\r\n        className={classes.number}\r\n      />\r\n    </FormGroup>,\r\n    <FormGroup key=\"checkboxes\" className={classes.checkboxGroup}>\r\n      <Field\r\n        key=\"Hypertension\"\r\n        field_name=\"Hypertension\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Diabetes\"\r\n        field_name=\"Diabetes\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Peripheral Artery Disease\"\r\n        field_name=\"Peripheral Artery Disease\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Stroke\"\r\n        field_name=\"Stroke\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Heart failure\"\r\n        field_name=\"Heart failure\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Arrhythmia\"\r\n        field_name=\"Arrhythmia\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n    </FormGroup>,\r\n    <FormGroup key=\"urgent-checkboxes\" className={classes.checkboxGroup}>\r\n      <Field\r\n        key=\"Dialysis\"\r\n        field_name=\"Dialysis\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Endocarditis\"\r\n        field_name=\"Endocarditis\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Reanimation\"\r\n        field_name=\"Reanimation\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n      <Field\r\n        key=\"Cardiogenic Shock\"\r\n        field_name=\"Cardiogenic Shock\"\r\n        type=\"checkbox\"\r\n        formUpdate={formUpdate}\r\n        className={classes.checkbox}\r\n      />\r\n    </FormGroup>,\r\n    <FormGroup key=\"categories\" className={classes.categoryGroup}>\r\n      <Field\r\n        key=\"Sex\"\r\n        field_name=\"Sex\"\r\n        type=\"category\"\r\n        options={[\"Female\", \"Male\"]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n      <Field\r\n        key=\"COPD\"\r\n        field_name=\"COPD\"\r\n        type=\"category\"\r\n        options={[\"No\", \"Mild\", \"Moderate\", \"Severe\"]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n      <Field\r\n        key=\"Urgency upon admission\"\r\n        field_name=\"Urgency upon admission\"\r\n        type=\"category\"\r\n        options={[\"Elective\", \"Urgent\", \"Emergency\", \"Emergency - Rescue\"]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n      <Field\r\n        key=\"Weight of procedure\"\r\n        field_name=\"Weight of procedure\"\r\n        type=\"category\"\r\n        options={[\r\n          \"Isolated CABG\",\r\n          \"Isolated non-CABG\",\r\n          \"Two procedures\",\r\n          \"Three or more procedures\",\r\n        ]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n    </FormGroup>,\r\n    <FormGroup key=\"insufficiency-categories\" className={classes.categoryGroup}>\r\n      <Field\r\n        key=\"Aortic valve insufficiency\"\r\n        field_name=\"Aortic valve insufficiency\"\r\n        type=\"category\"\r\n        options={[\"No\", \"Trivial\", \"Mild\", \"Moderate\", \"Severe\"]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n      <Field\r\n        key=\"Mitral valve regurgitation\"\r\n        field_name=\"Mitral valve regurgitation\"\r\n        type=\"category\"\r\n        options={[\"No\", \"Trivial\", \"Mild\", \"Moderate\", \"Severe\"]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n      <Field\r\n        key=\"Tricuspid valve regurgitation\"\r\n        field_name=\"Tricuspid valve regurgitation\"\r\n        type=\"category\"\r\n        options={[\"No\", \"Trivial\", \"Mild\", \"Moderate\", \"Severe\"]}\r\n        formUpdate={formUpdate}\r\n        className={classes.category}\r\n      />\r\n    </FormGroup>,\r\n  ];\r\n  return (\r\n    <div className={classes.root}>\r\n      <h1>Cardiac Surgery Mortality Risk Calculator</h1>\r\n      <FormControl className={classes.formControl}>{fields}</FormControl>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleSubmit}\r\n        className={classes.submitButton}\r\n      >\r\n        submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Form from \"./views/Form.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Form />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}